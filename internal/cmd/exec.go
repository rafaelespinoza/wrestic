package cmd

import (
	"errors"
	"fmt"
	"os"

	"github.com/rafaelespinoza/wrestic/internal/exec"
	"github.com/urfave/cli/v2"
)

func makeExec(parentName, name string) *cli.Command {
	fullName := parentName + " " + name

	out := cli.Command{
		Name:      name,
		Usage:     "execute restic subcommands",
		UsageText: fmt.Sprintf("%s subcmd [options_for_%s] [-- [restic-flags]]", fullName, name),
		Description: `Invoke restic subcommands while leveraging authentication mechanisms
and repository metadata saved in a config file.`,
	}

	subcmds := []string{"backup", "check", "ls", "snapshots", "stats"}
	out.Subcommands = make([]*cli.Command, len(subcmds))

	for i, subcmd := range subcmds {
		out.Subcommands[i] = &cli.Command{
			Name: subcmd,
			Flags: []cli.Flag{
				&cli.PathFlag{
					Name:    "config-dir",
					Aliases: []string{"C"},
					Usage:   "base configuration directory",
					Value:   defaultConfigDir,
				},
				&cli.StringSliceFlag{
					Name:    "destnames",
					Aliases: []string{"d"},
					Usage:   "comma-separated destinations to operate on",
				},
				&cli.StringSliceFlag{
					Name:    "storenames",
					Aliases: []string{"s"},
					Usage:   "comma-separated storenames to operate on",
				},
				&cli.BoolFlag{
					Name:  "x",
					Usage: "actually execute the commands; if false then preview",
				},
			},
			Usage:     "run wrapped restic " + subcmd,
			UsageText: fmt.Sprintf("%s %s [options_for_%s] [-- [actual-restic-flags]]", fullName, subcmd, name),
			Description: fmt.Sprintf(`Invoke restic subcommands while leveraging authentication mechanisms
and repository metadata saved in a config file.

First, the subcommand searches the config file for destinations that match
the criteria specified in the destnames and storenames flags. Then it loops
over the results and invokes the specified restic subcommand upon each
destination.

By default, restic is not actually invoked. Instead, the arguments and flags
that would be passed to restic are written to stderr as a shell comment.
To actually run restic, use flag -x.

The arguments and flag values to pass to the %s subcommand should be
separated from flags for the real restic with two dashes:

	%s <subcommand> -storenames foo,bar -destnames bar,foo -- -h
	%s <subcommand> -storenames cha,del -destnames del,cha -- --actual-restic-flags --here

These restic flags are unnecessary to specify because they are generated by
this application:
	-r, --repo
	--password-command
`, fullName, fullName, fullName,
			),
			Action: makeExecAction(subcmd),
		}
	}

	return &out
}

func makeExecAction(subcmd string) cli.ActionFunc {
	return func(c *cli.Context) error {
		configDir := c.Path("config-dir")
		if configDir == "" {
			return errors.New("config dir cannot be empty; possibly could not determine a default either")
		}

		datastores, err := fetchDatastores(configDir, c.StringSlice("storenames"), c.StringSlice("destnames"))
		if err != nil {
			return err
		}

		batch := exec.ResticBatch{
			ConfigDir:  configDir,
			Sink:       os.Stderr,
			Subcommand: subcmd,
			Args:       c.Args().Slice(),
			Run:        c.Bool("x"),
			NewCommand: func() exec.Command { return exec.NewRestic(os.Stdout, os.Stderr) },
		}

		return batch.Do(c.Context, datastores)
	}
}
